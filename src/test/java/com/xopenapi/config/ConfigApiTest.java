/*
 * 配置服务API
 * 配置服务API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.xopenapi.config;

import com.xopenapi.ApiException;
import com.xopenapi.config.model.BatchRetrieveByKeysReq;
import com.xopenapi.config.model.BatchRetrieveByResourcesReq;
import com.xopenapi.config.model.CreateConfigReq;
import com.xopenapi.config.model.CursorQuery;
import com.xopenapi.config.model.IdsReq;
import com.xopenapi.config.model.InlineResponse200;
import com.xopenapi.config.model.InlineResponse2001;
import com.xopenapi.config.model.InlineResponse2002;
import com.xopenapi.config.model.InlineResponse2003;
import com.xopenapi.config.model.InlineResponse2004;
import com.xopenapi.config.model.InlineResponse2005;
import com.xopenapi.config.model.PageQuery;
import com.xopenapi.config.model.RetrieveConfigByKeyReq;
import com.xopenapi.config.model.UpdateConfigReq;
import com.xopenapi.config.model.UpdateConfigTemplateReq;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ConfigApi
 */
@Ignore
public class ConfigApiTest {

    private final ConfigApi api = new ConfigApi();

    
    /**
     * 批量删除配置
     *
     * 批量删除配置通过配置Id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void configBatchDeletePostTest() throws ApiException {
        IdsReq idsReq = null;
        InlineResponse2001 response = api.configBatchDeletePost(idsReq);

        // TODO: test validations
    }
    
    /**
     * 查询配置
     *
     * 查询配置通过配置Keys和资源ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void configBatchRetrieveByKeysPostTest() throws ApiException {
        BatchRetrieveByKeysReq batchRetrieveByKeysReq = null;
        InlineResponse2002 response = api.configBatchRetrieveByKeysPost(batchRetrieveByKeysReq);

        // TODO: test validations
    }
    
    /**
     * 查询配置
     *
     * 查询配置通过配置GroupID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void configBatchRetrieveByResourcesPostTest() throws ApiException {
        BatchRetrieveByResourcesReq batchRetrieveByResourcesReq = null;
        InlineResponse2002 response = api.configBatchRetrieveByResourcesPost(batchRetrieveByResourcesReq);

        // TODO: test validations
    }
    
    /**
     * 批量查询配置
     *
     * 批量查询配置通过配置Id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void configBatchRetrievePostTest() throws ApiException {
        IdsReq idsReq = null;
        InlineResponse2002 response = api.configBatchRetrievePost(idsReq);

        // TODO: test validations
    }
    
    /**
     * Cursor查询配置
     *
     * Cursor查询配置
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void configCursorPostTest() throws ApiException {
        CursorQuery cursorQuery = null;
        InlineResponse2004 response = api.configCursorPost(cursorQuery);

        // TODO: test validations
    }
    
    /**
     * 删除配置
     *
     * 删除配置
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void configIdDeleteTest() throws ApiException {
        String id = null;
        InlineResponse2001 response = api.configIdDelete(id);

        // TODO: test validations
    }
    
    /**
     * 查询配置
     *
     * 查询配置通过配置ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void configIdGetTest() throws ApiException {
        String id = null;
        InlineResponse200 response = api.configIdGet(id);

        // TODO: test validations
    }
    
    /**
     * Page查询配置
     *
     * Page查询配置
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void configPagePostTest() throws ApiException {
        PageQuery pageQuery = null;
        InlineResponse2003 response = api.configPagePost(pageQuery);

        // TODO: test validations
    }
    
    /**
     * 创建配置
     *
     * 创建配置
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void configPostTest() throws ApiException {
        CreateConfigReq createConfigReq = null;
        InlineResponse200 response = api.configPost(createConfigReq);

        // TODO: test validations
    }
    
    /**
     * 更新配置
     *
     * 更新配置，需要全部的配置信息
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void configPutTest() throws ApiException {
        UpdateConfigReq updateConfigReq = null;
        InlineResponse200 response = api.configPut(updateConfigReq);

        // TODO: test validations
    }
    
    /**
     * 查询配置
     *
     * 查询配置通过配置Key和资源ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void configRetrieveByKeyPostTest() throws ApiException {
        RetrieveConfigByKeyReq retrieveConfigByKeyReq = null;
        InlineResponse200 response = api.configRetrieveByKeyPost(retrieveConfigByKeyReq);

        // TODO: test validations
    }
    
    /**
     * 更新配置模版
     *
     * 更新配置模版，需要全部的配置模版信息
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void configTemplatePutTest() throws ApiException {
        UpdateConfigTemplateReq updateConfigTemplateReq = null;
        InlineResponse2005 response = api.configTemplatePut(updateConfigTemplateReq);

        // TODO: test validations
    }
    
}
