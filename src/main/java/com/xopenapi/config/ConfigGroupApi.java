/*
 * 配置服务API
 * 配置服务API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.xopenapi.config;

import com.xopenapi.ApiCallback;
import com.xopenapi.ApiClient;
import com.xopenapi.ApiException;
import com.xopenapi.ApiResponse;
import com.xopenapi.Configuration;
import com.xopenapi.Pair;
import com.xopenapi.ProgressRequestBody;
import com.xopenapi.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.xopenapi.config.model.CreateConfigGroupReq;
import com.xopenapi.config.model.CreateConfigGroupRsp;
import com.xopenapi.config.model.CursorConfigGroupsRsp;
import com.xopenapi.config.model.CursorQuery;
import com.xopenapi.config.model.DeleteRsp;
import com.xopenapi.config.model.GetConfigGroupRsp;
import com.xopenapi.config.model.GetConfigGroupsRsp;
import com.xopenapi.config.model.IdsReq;
import com.xopenapi.config.model.PageConfigGroupsRsp;
import com.xopenapi.config.model.PageQuery;
import com.xopenapi.config.model.RetrieveConfigGroupByNameRsp;
import com.xopenapi.config.model.UpdateConfigGroupReq;
import com.xopenapi.config.model.UpdateConfigGroupRsp;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ConfigGroupApi {
    private ApiClient localVarApiClient;

    public ConfigGroupApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ConfigGroupApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for configGroupBatchDeletePost
     * @param idsReq  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configGroupBatchDeletePostCall(IdsReq idsReq, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = idsReq;

        // create path and map variables
        String localVarPath = "/configGroup/batchDelete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, false);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call configGroupBatchDeletePostValidateBeforeCall(IdsReq idsReq, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = configGroupBatchDeletePostCall(idsReq, _callback);
        return localVarCall;

    }

    /**
     * 批量删除组
     * 批量删除组通过组Id
     * @param idsReq  (optional)
     * @return DeleteRsp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public DeleteRsp configGroupBatchDeletePost(IdsReq idsReq) throws ApiException {
        ApiResponse<DeleteRsp> localVarResp = configGroupBatchDeletePostWithHttpInfo(idsReq);
        return localVarResp.getData();
    }

    /**
     * 批量删除组
     * 批量删除组通过组Id
     * @param idsReq  (optional)
     * @return ApiResponse&lt;DeleteRsp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteRsp> configGroupBatchDeletePostWithHttpInfo(IdsReq idsReq) throws ApiException {
        okhttp3.Call localVarCall = configGroupBatchDeletePostValidateBeforeCall(idsReq, null);
        Type localVarReturnType = new TypeToken<DeleteRsp>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 批量删除组 (asynchronously)
     * 批量删除组通过组Id
     * @param idsReq  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configGroupBatchDeletePostAsync(IdsReq idsReq, final ApiCallback<DeleteRsp> _callback) throws ApiException {

        okhttp3.Call localVarCall = configGroupBatchDeletePostValidateBeforeCall(idsReq, _callback);
        Type localVarReturnType = new TypeToken<DeleteRsp>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for configGroupBatchRetrievePost
     * @param idsReq  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configGroupBatchRetrievePostCall(IdsReq idsReq, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = idsReq;

        // create path and map variables
        String localVarPath = "/configGroup/batchRetrieve";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, false);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call configGroupBatchRetrievePostValidateBeforeCall(IdsReq idsReq, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = configGroupBatchRetrievePostCall(idsReq, _callback);
        return localVarCall;

    }

    /**
     * 批量查询组
     * 批量查询组通过组Id
     * @param idsReq  (optional)
     * @return GetConfigGroupsRsp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public GetConfigGroupsRsp configGroupBatchRetrievePost(IdsReq idsReq) throws ApiException {
        ApiResponse<GetConfigGroupsRsp> localVarResp = configGroupBatchRetrievePostWithHttpInfo(idsReq);
        return localVarResp.getData();
    }

    /**
     * 批量查询组
     * 批量查询组通过组Id
     * @param idsReq  (optional)
     * @return ApiResponse&lt;GetConfigGroupsRsp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetConfigGroupsRsp> configGroupBatchRetrievePostWithHttpInfo(IdsReq idsReq) throws ApiException {
        okhttp3.Call localVarCall = configGroupBatchRetrievePostValidateBeforeCall(idsReq, null);
        Type localVarReturnType = new TypeToken<GetConfigGroupsRsp>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 批量查询组 (asynchronously)
     * 批量查询组通过组Id
     * @param idsReq  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configGroupBatchRetrievePostAsync(IdsReq idsReq, final ApiCallback<GetConfigGroupsRsp> _callback) throws ApiException {

        okhttp3.Call localVarCall = configGroupBatchRetrievePostValidateBeforeCall(idsReq, _callback);
        Type localVarReturnType = new TypeToken<GetConfigGroupsRsp>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for configGroupCursorPost
     * @param cursorQuery  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configGroupCursorPostCall(CursorQuery cursorQuery, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = cursorQuery;

        // create path and map variables
        String localVarPath = "/configGroup/cursor";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, false);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call configGroupCursorPostValidateBeforeCall(CursorQuery cursorQuery, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = configGroupCursorPostCall(cursorQuery, _callback);
        return localVarCall;

    }

    /**
     * Cursor查询组
     * Cursor查询组
     * @param cursorQuery  (optional)
     * @return CursorConfigGroupsRsp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public CursorConfigGroupsRsp configGroupCursorPost(CursorQuery cursorQuery) throws ApiException {
        ApiResponse<CursorConfigGroupsRsp> localVarResp = configGroupCursorPostWithHttpInfo(cursorQuery);
        return localVarResp.getData();
    }

    /**
     * Cursor查询组
     * Cursor查询组
     * @param cursorQuery  (optional)
     * @return ApiResponse&lt;CursorConfigGroupsRsp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CursorConfigGroupsRsp> configGroupCursorPostWithHttpInfo(CursorQuery cursorQuery) throws ApiException {
        okhttp3.Call localVarCall = configGroupCursorPostValidateBeforeCall(cursorQuery, null);
        Type localVarReturnType = new TypeToken<CursorConfigGroupsRsp>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Cursor查询组 (asynchronously)
     * Cursor查询组
     * @param cursorQuery  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configGroupCursorPostAsync(CursorQuery cursorQuery, final ApiCallback<CursorConfigGroupsRsp> _callback) throws ApiException {

        okhttp3.Call localVarCall = configGroupCursorPostValidateBeforeCall(cursorQuery, _callback);
        Type localVarReturnType = new TypeToken<CursorConfigGroupsRsp>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for configGroupIdDelete
     * @param id 删除组 (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configGroupIdDeleteCall(String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/configGroup/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, false);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call configGroupIdDeleteValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling configGroupIdDelete(Async)");
        }
        

        okhttp3.Call localVarCall = configGroupIdDeleteCall(id, _callback);
        return localVarCall;

    }

    /**
     * 删除组
     * 删除组
     * @param id 删除组 (required)
     * @return DeleteRsp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public DeleteRsp configGroupIdDelete(String id) throws ApiException {
        ApiResponse<DeleteRsp> localVarResp = configGroupIdDeleteWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 删除组
     * 删除组
     * @param id 删除组 (required)
     * @return ApiResponse&lt;DeleteRsp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteRsp> configGroupIdDeleteWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = configGroupIdDeleteValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<DeleteRsp>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 删除组 (asynchronously)
     * 删除组
     * @param id 删除组 (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configGroupIdDeleteAsync(String id, final ApiCallback<DeleteRsp> _callback) throws ApiException {

        okhttp3.Call localVarCall = configGroupIdDeleteValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<DeleteRsp>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for configGroupIdGet
     * @param id 查询组通过组ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configGroupIdGetCall(String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/configGroup/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, false);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call configGroupIdGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling configGroupIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = configGroupIdGetCall(id, _callback);
        return localVarCall;

    }

    /**
     * 查询组
     * 查询组通过组ID
     * @param id 查询组通过组ID (required)
     * @return GetConfigGroupRsp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public GetConfigGroupRsp configGroupIdGet(String id) throws ApiException {
        ApiResponse<GetConfigGroupRsp> localVarResp = configGroupIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 查询组
     * 查询组通过组ID
     * @param id 查询组通过组ID (required)
     * @return ApiResponse&lt;GetConfigGroupRsp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetConfigGroupRsp> configGroupIdGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = configGroupIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<GetConfigGroupRsp>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 查询组 (asynchronously)
     * 查询组通过组ID
     * @param id 查询组通过组ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configGroupIdGetAsync(String id, final ApiCallback<GetConfigGroupRsp> _callback) throws ApiException {

        okhttp3.Call localVarCall = configGroupIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<GetConfigGroupRsp>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for configGroupPagePost
     * @param pageQuery  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configGroupPagePostCall(PageQuery pageQuery, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = pageQuery;

        // create path and map variables
        String localVarPath = "/configGroup/page";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, false);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call configGroupPagePostValidateBeforeCall(PageQuery pageQuery, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = configGroupPagePostCall(pageQuery, _callback);
        return localVarCall;

    }

    /**
     * Page查询组
     * Page查询组
     * @param pageQuery  (optional)
     * @return PageConfigGroupsRsp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public PageConfigGroupsRsp configGroupPagePost(PageQuery pageQuery) throws ApiException {
        ApiResponse<PageConfigGroupsRsp> localVarResp = configGroupPagePostWithHttpInfo(pageQuery);
        return localVarResp.getData();
    }

    /**
     * Page查询组
     * Page查询组
     * @param pageQuery  (optional)
     * @return ApiResponse&lt;PageConfigGroupsRsp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PageConfigGroupsRsp> configGroupPagePostWithHttpInfo(PageQuery pageQuery) throws ApiException {
        okhttp3.Call localVarCall = configGroupPagePostValidateBeforeCall(pageQuery, null);
        Type localVarReturnType = new TypeToken<PageConfigGroupsRsp>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Page查询组 (asynchronously)
     * Page查询组
     * @param pageQuery  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configGroupPagePostAsync(PageQuery pageQuery, final ApiCallback<PageConfigGroupsRsp> _callback) throws ApiException {

        okhttp3.Call localVarCall = configGroupPagePostValidateBeforeCall(pageQuery, _callback);
        Type localVarReturnType = new TypeToken<PageConfigGroupsRsp>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for configGroupPost
     * @param createConfigGroupReq  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configGroupPostCall(CreateConfigGroupReq createConfigGroupReq, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = createConfigGroupReq;

        // create path and map variables
        String localVarPath = "/configGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, false);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call configGroupPostValidateBeforeCall(CreateConfigGroupReq createConfigGroupReq, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = configGroupPostCall(createConfigGroupReq, _callback);
        return localVarCall;

    }

    /**
     * 创建组
     * 创建组
     * @param createConfigGroupReq  (optional)
     * @return CreateConfigGroupRsp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public CreateConfigGroupRsp configGroupPost(CreateConfigGroupReq createConfigGroupReq) throws ApiException {
        ApiResponse<CreateConfigGroupRsp> localVarResp = configGroupPostWithHttpInfo(createConfigGroupReq);
        return localVarResp.getData();
    }

    /**
     * 创建组
     * 创建组
     * @param createConfigGroupReq  (optional)
     * @return ApiResponse&lt;CreateConfigGroupRsp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateConfigGroupRsp> configGroupPostWithHttpInfo(CreateConfigGroupReq createConfigGroupReq) throws ApiException {
        okhttp3.Call localVarCall = configGroupPostValidateBeforeCall(createConfigGroupReq, null);
        Type localVarReturnType = new TypeToken<CreateConfigGroupRsp>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 创建组 (asynchronously)
     * 创建组
     * @param createConfigGroupReq  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configGroupPostAsync(CreateConfigGroupReq createConfigGroupReq, final ApiCallback<CreateConfigGroupRsp> _callback) throws ApiException {

        okhttp3.Call localVarCall = configGroupPostValidateBeforeCall(createConfigGroupReq, _callback);
        Type localVarReturnType = new TypeToken<CreateConfigGroupRsp>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for configGroupPut
     * @param updateConfigGroupReq  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configGroupPutCall(UpdateConfigGroupReq updateConfigGroupReq, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = updateConfigGroupReq;

        // create path and map variables
        String localVarPath = "/configGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, false);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call configGroupPutValidateBeforeCall(UpdateConfigGroupReq updateConfigGroupReq, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = configGroupPutCall(updateConfigGroupReq, _callback);
        return localVarCall;

    }

    /**
     * 更新组
     * 更新组，需要全部的组信息
     * @param updateConfigGroupReq  (optional)
     * @return UpdateConfigGroupRsp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public UpdateConfigGroupRsp configGroupPut(UpdateConfigGroupReq updateConfigGroupReq) throws ApiException {
        ApiResponse<UpdateConfigGroupRsp> localVarResp = configGroupPutWithHttpInfo(updateConfigGroupReq);
        return localVarResp.getData();
    }

    /**
     * 更新组
     * 更新组，需要全部的组信息
     * @param updateConfigGroupReq  (optional)
     * @return ApiResponse&lt;UpdateConfigGroupRsp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateConfigGroupRsp> configGroupPutWithHttpInfo(UpdateConfigGroupReq updateConfigGroupReq) throws ApiException {
        okhttp3.Call localVarCall = configGroupPutValidateBeforeCall(updateConfigGroupReq, null);
        Type localVarReturnType = new TypeToken<UpdateConfigGroupRsp>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 更新组 (asynchronously)
     * 更新组，需要全部的组信息
     * @param updateConfigGroupReq  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configGroupPutAsync(UpdateConfigGroupReq updateConfigGroupReq, final ApiCallback<UpdateConfigGroupRsp> _callback) throws ApiException {

        okhttp3.Call localVarCall = configGroupPutValidateBeforeCall(updateConfigGroupReq, _callback);
        Type localVarReturnType = new TypeToken<UpdateConfigGroupRsp>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for configGroupRetrieveByNamePost
     * @param name 查询组通过Name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configGroupRetrieveByNamePostCall(String name, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/configGroup/retrieveByName";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, false);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call configGroupRetrieveByNamePostValidateBeforeCall(String name, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling configGroupRetrieveByNamePost(Async)");
        }
        

        okhttp3.Call localVarCall = configGroupRetrieveByNamePostCall(name, _callback);
        return localVarCall;

    }

    /**
     * 查询组
     * 查询组通过Name
     * @param name 查询组通过Name (required)
     * @return RetrieveConfigGroupByNameRsp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public RetrieveConfigGroupByNameRsp configGroupRetrieveByNamePost(String name) throws ApiException {
        ApiResponse<RetrieveConfigGroupByNameRsp> localVarResp = configGroupRetrieveByNamePostWithHttpInfo(name);
        return localVarResp.getData();
    }

    /**
     * 查询组
     * 查询组通过Name
     * @param name 查询组通过Name (required)
     * @return ApiResponse&lt;RetrieveConfigGroupByNameRsp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RetrieveConfigGroupByNameRsp> configGroupRetrieveByNamePostWithHttpInfo(String name) throws ApiException {
        okhttp3.Call localVarCall = configGroupRetrieveByNamePostValidateBeforeCall(name, null);
        Type localVarReturnType = new TypeToken<RetrieveConfigGroupByNameRsp>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 查询组 (asynchronously)
     * 查询组通过Name
     * @param name 查询组通过Name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configGroupRetrieveByNamePostAsync(String name, final ApiCallback<RetrieveConfigGroupByNameRsp> _callback) throws ApiException {

        okhttp3.Call localVarCall = configGroupRetrieveByNamePostValidateBeforeCall(name, _callback);
        Type localVarReturnType = new TypeToken<RetrieveConfigGroupByNameRsp>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
