/*
 * 配置服务API
 * 配置服务API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.xopenapi.config;

import com.xopenapi.ApiCallback;
import com.xopenapi.ApiClient;
import com.xopenapi.ApiException;
import com.xopenapi.ApiResponse;
import com.xopenapi.Configuration;
import com.xopenapi.Pair;
import com.xopenapi.ProgressRequestBody;
import com.xopenapi.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.xopenapi.config.model.BatchRetrieveConfigTemplateByKeysReq;
import com.xopenapi.config.model.BatchRetrieveConfigTemplatesByGroupRsp;
import com.xopenapi.config.model.BatchRetrieveConfigTemplatesByKeysRsp;
import com.xopenapi.config.model.BatchRetrieveConfigTemplatesRsp;
import com.xopenapi.config.model.CreateConfigTemplateReq;
import com.xopenapi.config.model.CreateConfigTemplateRsp;
import com.xopenapi.config.model.CursorConfigTemplatesRsp;
import com.xopenapi.config.model.CursorQuery;
import com.xopenapi.config.model.DeleteRsp;
import com.xopenapi.config.model.GetConfigTemplateRsp;
import com.xopenapi.config.model.IdsReq;
import com.xopenapi.config.model.PageConfigTemplatesRsp;
import com.xopenapi.config.model.PageQuery;
import com.xopenapi.config.model.RetrieveConfigTemplateByKeyRsp;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ConfigTemplateApi {
    private ApiClient localVarApiClient;

    public ConfigTemplateApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ConfigTemplateApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for configTemplateBatchDeletePost
     * @param idsReq  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configTemplateBatchDeletePostCall(IdsReq idsReq, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = idsReq;

        // create path and map variables
        String localVarPath = "/configTemplate/batchDelete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, false);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call configTemplateBatchDeletePostValidateBeforeCall(IdsReq idsReq, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = configTemplateBatchDeletePostCall(idsReq, _callback);
        return localVarCall;

    }

    /**
     * 批量删除配置模版
     * 批量删除配置模版通过配置Id
     * @param idsReq  (optional)
     * @return DeleteRsp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public DeleteRsp configTemplateBatchDeletePost(IdsReq idsReq) throws ApiException {
        ApiResponse<DeleteRsp> localVarResp = configTemplateBatchDeletePostWithHttpInfo(idsReq);
        return localVarResp.getData();
    }

    /**
     * 批量删除配置模版
     * 批量删除配置模版通过配置Id
     * @param idsReq  (optional)
     * @return ApiResponse&lt;DeleteRsp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteRsp> configTemplateBatchDeletePostWithHttpInfo(IdsReq idsReq) throws ApiException {
        okhttp3.Call localVarCall = configTemplateBatchDeletePostValidateBeforeCall(idsReq, null);
        Type localVarReturnType = new TypeToken<DeleteRsp>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 批量删除配置模版 (asynchronously)
     * 批量删除配置模版通过配置Id
     * @param idsReq  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configTemplateBatchDeletePostAsync(IdsReq idsReq, final ApiCallback<DeleteRsp> _callback) throws ApiException {

        okhttp3.Call localVarCall = configTemplateBatchDeletePostValidateBeforeCall(idsReq, _callback);
        Type localVarReturnType = new TypeToken<DeleteRsp>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for configTemplateBatchRetrieveByGroupPost
     * @param groupName 分组标签名 (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configTemplateBatchRetrieveByGroupPostCall(String groupName, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/configTemplate/batchRetrieveByGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (groupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("groupName", groupName));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, false);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call configTemplateBatchRetrieveByGroupPostValidateBeforeCall(String groupName, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'groupName' is set
        if (groupName == null) {
            throw new ApiException("Missing the required parameter 'groupName' when calling configTemplateBatchRetrieveByGroupPost(Async)");
        }
        

        okhttp3.Call localVarCall = configTemplateBatchRetrieveByGroupPostCall(groupName, _callback);
        return localVarCall;

    }

    /**
     * 查询配置模版
     * 查询配置模版通过配置模版GroupID
     * @param groupName 分组标签名 (required)
     * @return BatchRetrieveConfigTemplatesByGroupRsp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public BatchRetrieveConfigTemplatesByGroupRsp configTemplateBatchRetrieveByGroupPost(String groupName) throws ApiException {
        ApiResponse<BatchRetrieveConfigTemplatesByGroupRsp> localVarResp = configTemplateBatchRetrieveByGroupPostWithHttpInfo(groupName);
        return localVarResp.getData();
    }

    /**
     * 查询配置模版
     * 查询配置模版通过配置模版GroupID
     * @param groupName 分组标签名 (required)
     * @return ApiResponse&lt;BatchRetrieveConfigTemplatesByGroupRsp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BatchRetrieveConfigTemplatesByGroupRsp> configTemplateBatchRetrieveByGroupPostWithHttpInfo(String groupName) throws ApiException {
        okhttp3.Call localVarCall = configTemplateBatchRetrieveByGroupPostValidateBeforeCall(groupName, null);
        Type localVarReturnType = new TypeToken<BatchRetrieveConfigTemplatesByGroupRsp>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 查询配置模版 (asynchronously)
     * 查询配置模版通过配置模版GroupID
     * @param groupName 分组标签名 (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configTemplateBatchRetrieveByGroupPostAsync(String groupName, final ApiCallback<BatchRetrieveConfigTemplatesByGroupRsp> _callback) throws ApiException {

        okhttp3.Call localVarCall = configTemplateBatchRetrieveByGroupPostValidateBeforeCall(groupName, _callback);
        Type localVarReturnType = new TypeToken<BatchRetrieveConfigTemplatesByGroupRsp>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for configTemplateBatchRetrieveByKeysPost
     * @param batchRetrieveConfigTemplateByKeysReq  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configTemplateBatchRetrieveByKeysPostCall(BatchRetrieveConfigTemplateByKeysReq batchRetrieveConfigTemplateByKeysReq, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = batchRetrieveConfigTemplateByKeysReq;

        // create path and map variables
        String localVarPath = "/configTemplate/batchRetrieveByKeys";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, false);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call configTemplateBatchRetrieveByKeysPostValidateBeforeCall(BatchRetrieveConfigTemplateByKeysReq batchRetrieveConfigTemplateByKeysReq, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = configTemplateBatchRetrieveByKeysPostCall(batchRetrieveConfigTemplateByKeysReq, _callback);
        return localVarCall;

    }

    /**
     * 查询配置模版
     * 查询配置通过配置Keys
     * @param batchRetrieveConfigTemplateByKeysReq  (optional)
     * @return BatchRetrieveConfigTemplatesByKeysRsp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public BatchRetrieveConfigTemplatesByKeysRsp configTemplateBatchRetrieveByKeysPost(BatchRetrieveConfigTemplateByKeysReq batchRetrieveConfigTemplateByKeysReq) throws ApiException {
        ApiResponse<BatchRetrieveConfigTemplatesByKeysRsp> localVarResp = configTemplateBatchRetrieveByKeysPostWithHttpInfo(batchRetrieveConfigTemplateByKeysReq);
        return localVarResp.getData();
    }

    /**
     * 查询配置模版
     * 查询配置通过配置Keys
     * @param batchRetrieveConfigTemplateByKeysReq  (optional)
     * @return ApiResponse&lt;BatchRetrieveConfigTemplatesByKeysRsp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BatchRetrieveConfigTemplatesByKeysRsp> configTemplateBatchRetrieveByKeysPostWithHttpInfo(BatchRetrieveConfigTemplateByKeysReq batchRetrieveConfigTemplateByKeysReq) throws ApiException {
        okhttp3.Call localVarCall = configTemplateBatchRetrieveByKeysPostValidateBeforeCall(batchRetrieveConfigTemplateByKeysReq, null);
        Type localVarReturnType = new TypeToken<BatchRetrieveConfigTemplatesByKeysRsp>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 查询配置模版 (asynchronously)
     * 查询配置通过配置Keys
     * @param batchRetrieveConfigTemplateByKeysReq  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configTemplateBatchRetrieveByKeysPostAsync(BatchRetrieveConfigTemplateByKeysReq batchRetrieveConfigTemplateByKeysReq, final ApiCallback<BatchRetrieveConfigTemplatesByKeysRsp> _callback) throws ApiException {

        okhttp3.Call localVarCall = configTemplateBatchRetrieveByKeysPostValidateBeforeCall(batchRetrieveConfigTemplateByKeysReq, _callback);
        Type localVarReturnType = new TypeToken<BatchRetrieveConfigTemplatesByKeysRsp>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for configTemplateBatchRetrievePost
     * @param idsReq  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configTemplateBatchRetrievePostCall(IdsReq idsReq, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = idsReq;

        // create path and map variables
        String localVarPath = "/configTemplate/batchRetrieve";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, false);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call configTemplateBatchRetrievePostValidateBeforeCall(IdsReq idsReq, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = configTemplateBatchRetrievePostCall(idsReq, _callback);
        return localVarCall;

    }

    /**
     * 批量查询配置模版
     * 批量查询配置模版通过配置Id
     * @param idsReq  (optional)
     * @return BatchRetrieveConfigTemplatesRsp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public BatchRetrieveConfigTemplatesRsp configTemplateBatchRetrievePost(IdsReq idsReq) throws ApiException {
        ApiResponse<BatchRetrieveConfigTemplatesRsp> localVarResp = configTemplateBatchRetrievePostWithHttpInfo(idsReq);
        return localVarResp.getData();
    }

    /**
     * 批量查询配置模版
     * 批量查询配置模版通过配置Id
     * @param idsReq  (optional)
     * @return ApiResponse&lt;BatchRetrieveConfigTemplatesRsp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BatchRetrieveConfigTemplatesRsp> configTemplateBatchRetrievePostWithHttpInfo(IdsReq idsReq) throws ApiException {
        okhttp3.Call localVarCall = configTemplateBatchRetrievePostValidateBeforeCall(idsReq, null);
        Type localVarReturnType = new TypeToken<BatchRetrieveConfigTemplatesRsp>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 批量查询配置模版 (asynchronously)
     * 批量查询配置模版通过配置Id
     * @param idsReq  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configTemplateBatchRetrievePostAsync(IdsReq idsReq, final ApiCallback<BatchRetrieveConfigTemplatesRsp> _callback) throws ApiException {

        okhttp3.Call localVarCall = configTemplateBatchRetrievePostValidateBeforeCall(idsReq, _callback);
        Type localVarReturnType = new TypeToken<BatchRetrieveConfigTemplatesRsp>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for configTemplateCursorPost
     * @param cursorQuery  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configTemplateCursorPostCall(CursorQuery cursorQuery, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = cursorQuery;

        // create path and map variables
        String localVarPath = "/configTemplate/cursor";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, false);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call configTemplateCursorPostValidateBeforeCall(CursorQuery cursorQuery, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = configTemplateCursorPostCall(cursorQuery, _callback);
        return localVarCall;

    }

    /**
     * Cursor查询配置模版
     * Cursor查询配置模版
     * @param cursorQuery  (optional)
     * @return CursorConfigTemplatesRsp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public CursorConfigTemplatesRsp configTemplateCursorPost(CursorQuery cursorQuery) throws ApiException {
        ApiResponse<CursorConfigTemplatesRsp> localVarResp = configTemplateCursorPostWithHttpInfo(cursorQuery);
        return localVarResp.getData();
    }

    /**
     * Cursor查询配置模版
     * Cursor查询配置模版
     * @param cursorQuery  (optional)
     * @return ApiResponse&lt;CursorConfigTemplatesRsp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CursorConfigTemplatesRsp> configTemplateCursorPostWithHttpInfo(CursorQuery cursorQuery) throws ApiException {
        okhttp3.Call localVarCall = configTemplateCursorPostValidateBeforeCall(cursorQuery, null);
        Type localVarReturnType = new TypeToken<CursorConfigTemplatesRsp>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Cursor查询配置模版 (asynchronously)
     * Cursor查询配置模版
     * @param cursorQuery  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configTemplateCursorPostAsync(CursorQuery cursorQuery, final ApiCallback<CursorConfigTemplatesRsp> _callback) throws ApiException {

        okhttp3.Call localVarCall = configTemplateCursorPostValidateBeforeCall(cursorQuery, _callback);
        Type localVarReturnType = new TypeToken<CursorConfigTemplatesRsp>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for configTemplateIdDelete
     * @param id 删除配置模版 (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configTemplateIdDeleteCall(String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/configTemplate/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, false);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call configTemplateIdDeleteValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling configTemplateIdDelete(Async)");
        }
        

        okhttp3.Call localVarCall = configTemplateIdDeleteCall(id, _callback);
        return localVarCall;

    }

    /**
     * 删除配置模版
     * 删除配置模版
     * @param id 删除配置模版 (required)
     * @return DeleteRsp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public DeleteRsp configTemplateIdDelete(String id) throws ApiException {
        ApiResponse<DeleteRsp> localVarResp = configTemplateIdDeleteWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 删除配置模版
     * 删除配置模版
     * @param id 删除配置模版 (required)
     * @return ApiResponse&lt;DeleteRsp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteRsp> configTemplateIdDeleteWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = configTemplateIdDeleteValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<DeleteRsp>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 删除配置模版 (asynchronously)
     * 删除配置模版
     * @param id 删除配置模版 (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configTemplateIdDeleteAsync(String id, final ApiCallback<DeleteRsp> _callback) throws ApiException {

        okhttp3.Call localVarCall = configTemplateIdDeleteValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<DeleteRsp>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for configTemplateIdGet
     * @param id 查询配置通过配置ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configTemplateIdGetCall(String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/configTemplate/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, false);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call configTemplateIdGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling configTemplateIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = configTemplateIdGetCall(id, _callback);
        return localVarCall;

    }

    /**
     * 查询配置模版
     * 查询配置通过配置模版ID
     * @param id 查询配置通过配置ID (required)
     * @return GetConfigTemplateRsp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public GetConfigTemplateRsp configTemplateIdGet(String id) throws ApiException {
        ApiResponse<GetConfigTemplateRsp> localVarResp = configTemplateIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 查询配置模版
     * 查询配置通过配置模版ID
     * @param id 查询配置通过配置ID (required)
     * @return ApiResponse&lt;GetConfigTemplateRsp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetConfigTemplateRsp> configTemplateIdGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = configTemplateIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<GetConfigTemplateRsp>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 查询配置模版 (asynchronously)
     * 查询配置通过配置模版ID
     * @param id 查询配置通过配置ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configTemplateIdGetAsync(String id, final ApiCallback<GetConfigTemplateRsp> _callback) throws ApiException {

        okhttp3.Call localVarCall = configTemplateIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<GetConfigTemplateRsp>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for configTemplatePagePost
     * @param pageQuery  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configTemplatePagePostCall(PageQuery pageQuery, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = pageQuery;

        // create path and map variables
        String localVarPath = "/configTemplate/page";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, false);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call configTemplatePagePostValidateBeforeCall(PageQuery pageQuery, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = configTemplatePagePostCall(pageQuery, _callback);
        return localVarCall;

    }

    /**
     * Page查询配置模版
     * Page查询配置模版
     * @param pageQuery  (optional)
     * @return PageConfigTemplatesRsp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public PageConfigTemplatesRsp configTemplatePagePost(PageQuery pageQuery) throws ApiException {
        ApiResponse<PageConfigTemplatesRsp> localVarResp = configTemplatePagePostWithHttpInfo(pageQuery);
        return localVarResp.getData();
    }

    /**
     * Page查询配置模版
     * Page查询配置模版
     * @param pageQuery  (optional)
     * @return ApiResponse&lt;PageConfigTemplatesRsp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PageConfigTemplatesRsp> configTemplatePagePostWithHttpInfo(PageQuery pageQuery) throws ApiException {
        okhttp3.Call localVarCall = configTemplatePagePostValidateBeforeCall(pageQuery, null);
        Type localVarReturnType = new TypeToken<PageConfigTemplatesRsp>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Page查询配置模版 (asynchronously)
     * Page查询配置模版
     * @param pageQuery  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configTemplatePagePostAsync(PageQuery pageQuery, final ApiCallback<PageConfigTemplatesRsp> _callback) throws ApiException {

        okhttp3.Call localVarCall = configTemplatePagePostValidateBeforeCall(pageQuery, _callback);
        Type localVarReturnType = new TypeToken<PageConfigTemplatesRsp>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for configTemplatePost
     * @param createConfigTemplateReq  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configTemplatePostCall(CreateConfigTemplateReq createConfigTemplateReq, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = createConfigTemplateReq;

        // create path and map variables
        String localVarPath = "/configTemplate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, false);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call configTemplatePostValidateBeforeCall(CreateConfigTemplateReq createConfigTemplateReq, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = configTemplatePostCall(createConfigTemplateReq, _callback);
        return localVarCall;

    }

    /**
     * 创建配置模版
     * 创建配置模版
     * @param createConfigTemplateReq  (optional)
     * @return CreateConfigTemplateRsp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public CreateConfigTemplateRsp configTemplatePost(CreateConfigTemplateReq createConfigTemplateReq) throws ApiException {
        ApiResponse<CreateConfigTemplateRsp> localVarResp = configTemplatePostWithHttpInfo(createConfigTemplateReq);
        return localVarResp.getData();
    }

    /**
     * 创建配置模版
     * 创建配置模版
     * @param createConfigTemplateReq  (optional)
     * @return ApiResponse&lt;CreateConfigTemplateRsp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateConfigTemplateRsp> configTemplatePostWithHttpInfo(CreateConfigTemplateReq createConfigTemplateReq) throws ApiException {
        okhttp3.Call localVarCall = configTemplatePostValidateBeforeCall(createConfigTemplateReq, null);
        Type localVarReturnType = new TypeToken<CreateConfigTemplateRsp>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 创建配置模版 (asynchronously)
     * 创建配置模版
     * @param createConfigTemplateReq  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configTemplatePostAsync(CreateConfigTemplateReq createConfigTemplateReq, final ApiCallback<CreateConfigTemplateRsp> _callback) throws ApiException {

        okhttp3.Call localVarCall = configTemplatePostValidateBeforeCall(createConfigTemplateReq, _callback);
        Type localVarReturnType = new TypeToken<CreateConfigTemplateRsp>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for configTemplateRetrieveByKeyPost
     * @param key 主键Key (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configTemplateRetrieveByKeyPostCall(String key, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/configTemplate/retrieveByKey";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, false);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call configTemplateRetrieveByKeyPostValidateBeforeCall(String key, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling configTemplateRetrieveByKeyPost(Async)");
        }
        

        okhttp3.Call localVarCall = configTemplateRetrieveByKeyPostCall(key, _callback);
        return localVarCall;

    }

    /**
     * 查询配置模版
     * 查询配置模版通过配置Key
     * @param key 主键Key (required)
     * @return RetrieveConfigTemplateByKeyRsp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public RetrieveConfigTemplateByKeyRsp configTemplateRetrieveByKeyPost(String key) throws ApiException {
        ApiResponse<RetrieveConfigTemplateByKeyRsp> localVarResp = configTemplateRetrieveByKeyPostWithHttpInfo(key);
        return localVarResp.getData();
    }

    /**
     * 查询配置模版
     * 查询配置模版通过配置Key
     * @param key 主键Key (required)
     * @return ApiResponse&lt;RetrieveConfigTemplateByKeyRsp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RetrieveConfigTemplateByKeyRsp> configTemplateRetrieveByKeyPostWithHttpInfo(String key) throws ApiException {
        okhttp3.Call localVarCall = configTemplateRetrieveByKeyPostValidateBeforeCall(key, null);
        Type localVarReturnType = new TypeToken<RetrieveConfigTemplateByKeyRsp>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 查询配置模版 (asynchronously)
     * 查询配置模版通过配置Key
     * @param key 主键Key (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configTemplateRetrieveByKeyPostAsync(String key, final ApiCallback<RetrieveConfigTemplateByKeyRsp> _callback) throws ApiException {

        okhttp3.Call localVarCall = configTemplateRetrieveByKeyPostValidateBeforeCall(key, _callback);
        Type localVarReturnType = new TypeToken<RetrieveConfigTemplateByKeyRsp>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
