/*
 * 配置服务API
 * 配置服务API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.xopenapi.config;

import com.xopenapi.ApiCallback;
import com.xopenapi.ApiClient;
import com.xopenapi.ApiException;
import com.xopenapi.ApiResponse;
import com.xopenapi.Configuration;
import com.xopenapi.Pair;
import com.xopenapi.ProgressRequestBody;
import com.xopenapi.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.xopenapi.config.model.BatchRetrieveByKeysReq;
import com.xopenapi.config.model.BatchRetrieveByResourcesReq;
import com.xopenapi.config.model.BatchRetrieveConfigsByKeysRsp;
import com.xopenapi.config.model.BatchRetrieveConfigsRsp;
import com.xopenapi.config.model.CreateConfigReq;
import com.xopenapi.config.model.CreateConfigRsp;
import com.xopenapi.config.model.CursorConfigsRsp;
import com.xopenapi.config.model.CursorQuery;
import com.xopenapi.config.model.GetConfigRsp;
import com.xopenapi.config.model.IdsReq;
import com.xopenapi.config.model.InlineResponse200;
import com.xopenapi.config.model.InlineResponse2001;
import com.xopenapi.config.model.PageConfigsRsp;
import com.xopenapi.config.model.PageQuery;
import com.xopenapi.config.model.RetrieveConfigByKeyReq;
import com.xopenapi.config.model.RetrieveConfigByKeyRsp;
import com.xopenapi.config.model.UpdateConfigReq;
import com.xopenapi.config.model.UpdateConfigRsp;
import com.xopenapi.config.model.UpdateConfigTemplateReq;
import com.xopenapi.config.model.UpdateConfigTemplateRsp;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ConfigApi {
    private ApiClient localVarApiClient;

    public ConfigApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ConfigApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for configBatchDeletePost
     * @param idsReq  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configBatchDeletePostCall(IdsReq idsReq, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = idsReq;

        // create path and map variables
        String localVarPath = "/config/batchDelete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, false);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call configBatchDeletePostValidateBeforeCall(IdsReq idsReq, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = configBatchDeletePostCall(idsReq, _callback);
        return localVarCall;

    }

    /**
     * 批量删除配置
     * 批量删除配置通过配置Id
     * @param idsReq  (optional)
     * @return InlineResponse200
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse200 configBatchDeletePost(IdsReq idsReq) throws ApiException {
        ApiResponse<InlineResponse200> localVarResp = configBatchDeletePostWithHttpInfo(idsReq);
        return localVarResp.getData();
    }

    /**
     * 批量删除配置
     * 批量删除配置通过配置Id
     * @param idsReq  (optional)
     * @return ApiResponse&lt;InlineResponse200&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse200> configBatchDeletePostWithHttpInfo(IdsReq idsReq) throws ApiException {
        okhttp3.Call localVarCall = configBatchDeletePostValidateBeforeCall(idsReq, null);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 批量删除配置 (asynchronously)
     * 批量删除配置通过配置Id
     * @param idsReq  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configBatchDeletePostAsync(IdsReq idsReq, final ApiCallback<InlineResponse200> _callback) throws ApiException {

        okhttp3.Call localVarCall = configBatchDeletePostValidateBeforeCall(idsReq, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for configBatchRetrieveByKeysPost
     * @param batchRetrieveByKeysReq  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configBatchRetrieveByKeysPostCall(BatchRetrieveByKeysReq batchRetrieveByKeysReq, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = batchRetrieveByKeysReq;

        // create path and map variables
        String localVarPath = "/config/batchRetrieveByKeys";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, false);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call configBatchRetrieveByKeysPostValidateBeforeCall(BatchRetrieveByKeysReq batchRetrieveByKeysReq, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = configBatchRetrieveByKeysPostCall(batchRetrieveByKeysReq, _callback);
        return localVarCall;

    }

    /**
     * 查询配置
     * 查询配置通过配置Keys和资源ID
     * @param batchRetrieveByKeysReq  (optional)
     * @return BatchRetrieveConfigsByKeysRsp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public BatchRetrieveConfigsByKeysRsp configBatchRetrieveByKeysPost(BatchRetrieveByKeysReq batchRetrieveByKeysReq) throws ApiException {
        ApiResponse<BatchRetrieveConfigsByKeysRsp> localVarResp = configBatchRetrieveByKeysPostWithHttpInfo(batchRetrieveByKeysReq);
        return localVarResp.getData();
    }

    /**
     * 查询配置
     * 查询配置通过配置Keys和资源ID
     * @param batchRetrieveByKeysReq  (optional)
     * @return ApiResponse&lt;BatchRetrieveConfigsByKeysRsp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BatchRetrieveConfigsByKeysRsp> configBatchRetrieveByKeysPostWithHttpInfo(BatchRetrieveByKeysReq batchRetrieveByKeysReq) throws ApiException {
        okhttp3.Call localVarCall = configBatchRetrieveByKeysPostValidateBeforeCall(batchRetrieveByKeysReq, null);
        Type localVarReturnType = new TypeToken<BatchRetrieveConfigsByKeysRsp>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 查询配置 (asynchronously)
     * 查询配置通过配置Keys和资源ID
     * @param batchRetrieveByKeysReq  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configBatchRetrieveByKeysPostAsync(BatchRetrieveByKeysReq batchRetrieveByKeysReq, final ApiCallback<BatchRetrieveConfigsByKeysRsp> _callback) throws ApiException {

        okhttp3.Call localVarCall = configBatchRetrieveByKeysPostValidateBeforeCall(batchRetrieveByKeysReq, _callback);
        Type localVarReturnType = new TypeToken<BatchRetrieveConfigsByKeysRsp>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for configBatchRetrieveByResourcesPost
     * @param batchRetrieveByResourcesReq  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configBatchRetrieveByResourcesPostCall(BatchRetrieveByResourcesReq batchRetrieveByResourcesReq, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = batchRetrieveByResourcesReq;

        // create path and map variables
        String localVarPath = "/config/batchRetrieveByResources";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, false);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call configBatchRetrieveByResourcesPostValidateBeforeCall(BatchRetrieveByResourcesReq batchRetrieveByResourcesReq, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = configBatchRetrieveByResourcesPostCall(batchRetrieveByResourcesReq, _callback);
        return localVarCall;

    }

    /**
     * 查询配置
     * 查询配置通过配置GroupID
     * @param batchRetrieveByResourcesReq  (optional)
     * @return InlineResponse2001
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse2001 configBatchRetrieveByResourcesPost(BatchRetrieveByResourcesReq batchRetrieveByResourcesReq) throws ApiException {
        ApiResponse<InlineResponse2001> localVarResp = configBatchRetrieveByResourcesPostWithHttpInfo(batchRetrieveByResourcesReq);
        return localVarResp.getData();
    }

    /**
     * 查询配置
     * 查询配置通过配置GroupID
     * @param batchRetrieveByResourcesReq  (optional)
     * @return ApiResponse&lt;InlineResponse2001&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse2001> configBatchRetrieveByResourcesPostWithHttpInfo(BatchRetrieveByResourcesReq batchRetrieveByResourcesReq) throws ApiException {
        okhttp3.Call localVarCall = configBatchRetrieveByResourcesPostValidateBeforeCall(batchRetrieveByResourcesReq, null);
        Type localVarReturnType = new TypeToken<InlineResponse2001>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 查询配置 (asynchronously)
     * 查询配置通过配置GroupID
     * @param batchRetrieveByResourcesReq  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configBatchRetrieveByResourcesPostAsync(BatchRetrieveByResourcesReq batchRetrieveByResourcesReq, final ApiCallback<InlineResponse2001> _callback) throws ApiException {

        okhttp3.Call localVarCall = configBatchRetrieveByResourcesPostValidateBeforeCall(batchRetrieveByResourcesReq, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse2001>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for configBatchRetrievePost
     * @param idsReq  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configBatchRetrievePostCall(IdsReq idsReq, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = idsReq;

        // create path and map variables
        String localVarPath = "/config/batchRetrieve";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, false);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call configBatchRetrievePostValidateBeforeCall(IdsReq idsReq, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = configBatchRetrievePostCall(idsReq, _callback);
        return localVarCall;

    }

    /**
     * 批量查询配置
     * 批量查询配置通过配置Id
     * @param idsReq  (optional)
     * @return BatchRetrieveConfigsRsp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public BatchRetrieveConfigsRsp configBatchRetrievePost(IdsReq idsReq) throws ApiException {
        ApiResponse<BatchRetrieveConfigsRsp> localVarResp = configBatchRetrievePostWithHttpInfo(idsReq);
        return localVarResp.getData();
    }

    /**
     * 批量查询配置
     * 批量查询配置通过配置Id
     * @param idsReq  (optional)
     * @return ApiResponse&lt;BatchRetrieveConfigsRsp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BatchRetrieveConfigsRsp> configBatchRetrievePostWithHttpInfo(IdsReq idsReq) throws ApiException {
        okhttp3.Call localVarCall = configBatchRetrievePostValidateBeforeCall(idsReq, null);
        Type localVarReturnType = new TypeToken<BatchRetrieveConfigsRsp>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 批量查询配置 (asynchronously)
     * 批量查询配置通过配置Id
     * @param idsReq  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configBatchRetrievePostAsync(IdsReq idsReq, final ApiCallback<BatchRetrieveConfigsRsp> _callback) throws ApiException {

        okhttp3.Call localVarCall = configBatchRetrievePostValidateBeforeCall(idsReq, _callback);
        Type localVarReturnType = new TypeToken<BatchRetrieveConfigsRsp>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for configCursorPost
     * @param cursorQuery  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configCursorPostCall(CursorQuery cursorQuery, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = cursorQuery;

        // create path and map variables
        String localVarPath = "/config/cursor";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, false);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call configCursorPostValidateBeforeCall(CursorQuery cursorQuery, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = configCursorPostCall(cursorQuery, _callback);
        return localVarCall;

    }

    /**
     * Cursor查询配置
     * Cursor查询配置
     * @param cursorQuery  (optional)
     * @return CursorConfigsRsp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public CursorConfigsRsp configCursorPost(CursorQuery cursorQuery) throws ApiException {
        ApiResponse<CursorConfigsRsp> localVarResp = configCursorPostWithHttpInfo(cursorQuery);
        return localVarResp.getData();
    }

    /**
     * Cursor查询配置
     * Cursor查询配置
     * @param cursorQuery  (optional)
     * @return ApiResponse&lt;CursorConfigsRsp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CursorConfigsRsp> configCursorPostWithHttpInfo(CursorQuery cursorQuery) throws ApiException {
        okhttp3.Call localVarCall = configCursorPostValidateBeforeCall(cursorQuery, null);
        Type localVarReturnType = new TypeToken<CursorConfigsRsp>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Cursor查询配置 (asynchronously)
     * Cursor查询配置
     * @param cursorQuery  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configCursorPostAsync(CursorQuery cursorQuery, final ApiCallback<CursorConfigsRsp> _callback) throws ApiException {

        okhttp3.Call localVarCall = configCursorPostValidateBeforeCall(cursorQuery, _callback);
        Type localVarReturnType = new TypeToken<CursorConfigsRsp>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for configIdDelete
     * @param id 删除配置 (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configIdDeleteCall(String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, false);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call configIdDeleteValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling configIdDelete(Async)");
        }
        

        okhttp3.Call localVarCall = configIdDeleteCall(id, _callback);
        return localVarCall;

    }

    /**
     * 删除配置
     * 删除配置
     * @param id 删除配置 (required)
     * @return InlineResponse200
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse200 configIdDelete(String id) throws ApiException {
        ApiResponse<InlineResponse200> localVarResp = configIdDeleteWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 删除配置
     * 删除配置
     * @param id 删除配置 (required)
     * @return ApiResponse&lt;InlineResponse200&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse200> configIdDeleteWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = configIdDeleteValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 删除配置 (asynchronously)
     * 删除配置
     * @param id 删除配置 (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configIdDeleteAsync(String id, final ApiCallback<InlineResponse200> _callback) throws ApiException {

        okhttp3.Call localVarCall = configIdDeleteValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for configIdGet
     * @param id 查询配置通过配置ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configIdGetCall(String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, false);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call configIdGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling configIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = configIdGetCall(id, _callback);
        return localVarCall;

    }

    /**
     * 查询配置
     * 查询配置通过配置ID
     * @param id 查询配置通过配置ID (required)
     * @return GetConfigRsp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public GetConfigRsp configIdGet(String id) throws ApiException {
        ApiResponse<GetConfigRsp> localVarResp = configIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 查询配置
     * 查询配置通过配置ID
     * @param id 查询配置通过配置ID (required)
     * @return ApiResponse&lt;GetConfigRsp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetConfigRsp> configIdGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = configIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<GetConfigRsp>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 查询配置 (asynchronously)
     * 查询配置通过配置ID
     * @param id 查询配置通过配置ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configIdGetAsync(String id, final ApiCallback<GetConfigRsp> _callback) throws ApiException {

        okhttp3.Call localVarCall = configIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<GetConfigRsp>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for configPagePost
     * @param pageQuery  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configPagePostCall(PageQuery pageQuery, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = pageQuery;

        // create path and map variables
        String localVarPath = "/config/page";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, false);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call configPagePostValidateBeforeCall(PageQuery pageQuery, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = configPagePostCall(pageQuery, _callback);
        return localVarCall;

    }

    /**
     * Page查询配置
     * Page查询配置
     * @param pageQuery  (optional)
     * @return PageConfigsRsp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public PageConfigsRsp configPagePost(PageQuery pageQuery) throws ApiException {
        ApiResponse<PageConfigsRsp> localVarResp = configPagePostWithHttpInfo(pageQuery);
        return localVarResp.getData();
    }

    /**
     * Page查询配置
     * Page查询配置
     * @param pageQuery  (optional)
     * @return ApiResponse&lt;PageConfigsRsp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PageConfigsRsp> configPagePostWithHttpInfo(PageQuery pageQuery) throws ApiException {
        okhttp3.Call localVarCall = configPagePostValidateBeforeCall(pageQuery, null);
        Type localVarReturnType = new TypeToken<PageConfigsRsp>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Page查询配置 (asynchronously)
     * Page查询配置
     * @param pageQuery  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configPagePostAsync(PageQuery pageQuery, final ApiCallback<PageConfigsRsp> _callback) throws ApiException {

        okhttp3.Call localVarCall = configPagePostValidateBeforeCall(pageQuery, _callback);
        Type localVarReturnType = new TypeToken<PageConfigsRsp>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for configPost
     * @param createConfigReq  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configPostCall(CreateConfigReq createConfigReq, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = createConfigReq;

        // create path and map variables
        String localVarPath = "/config";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, false);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call configPostValidateBeforeCall(CreateConfigReq createConfigReq, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = configPostCall(createConfigReq, _callback);
        return localVarCall;

    }

    /**
     * 创建配置
     * 创建配置
     * @param createConfigReq  (optional)
     * @return CreateConfigRsp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public CreateConfigRsp configPost(CreateConfigReq createConfigReq) throws ApiException {
        ApiResponse<CreateConfigRsp> localVarResp = configPostWithHttpInfo(createConfigReq);
        return localVarResp.getData();
    }

    /**
     * 创建配置
     * 创建配置
     * @param createConfigReq  (optional)
     * @return ApiResponse&lt;CreateConfigRsp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateConfigRsp> configPostWithHttpInfo(CreateConfigReq createConfigReq) throws ApiException {
        okhttp3.Call localVarCall = configPostValidateBeforeCall(createConfigReq, null);
        Type localVarReturnType = new TypeToken<CreateConfigRsp>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 创建配置 (asynchronously)
     * 创建配置
     * @param createConfigReq  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configPostAsync(CreateConfigReq createConfigReq, final ApiCallback<CreateConfigRsp> _callback) throws ApiException {

        okhttp3.Call localVarCall = configPostValidateBeforeCall(createConfigReq, _callback);
        Type localVarReturnType = new TypeToken<CreateConfigRsp>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for configPut
     * @param updateConfigReq  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configPutCall(UpdateConfigReq updateConfigReq, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = updateConfigReq;

        // create path and map variables
        String localVarPath = "/config";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, false);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call configPutValidateBeforeCall(UpdateConfigReq updateConfigReq, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = configPutCall(updateConfigReq, _callback);
        return localVarCall;

    }

    /**
     * 更新配置
     * 更新配置，需要全部的配置信息
     * @param updateConfigReq  (optional)
     * @return UpdateConfigRsp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public UpdateConfigRsp configPut(UpdateConfigReq updateConfigReq) throws ApiException {
        ApiResponse<UpdateConfigRsp> localVarResp = configPutWithHttpInfo(updateConfigReq);
        return localVarResp.getData();
    }

    /**
     * 更新配置
     * 更新配置，需要全部的配置信息
     * @param updateConfigReq  (optional)
     * @return ApiResponse&lt;UpdateConfigRsp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateConfigRsp> configPutWithHttpInfo(UpdateConfigReq updateConfigReq) throws ApiException {
        okhttp3.Call localVarCall = configPutValidateBeforeCall(updateConfigReq, null);
        Type localVarReturnType = new TypeToken<UpdateConfigRsp>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 更新配置 (asynchronously)
     * 更新配置，需要全部的配置信息
     * @param updateConfigReq  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configPutAsync(UpdateConfigReq updateConfigReq, final ApiCallback<UpdateConfigRsp> _callback) throws ApiException {

        okhttp3.Call localVarCall = configPutValidateBeforeCall(updateConfigReq, _callback);
        Type localVarReturnType = new TypeToken<UpdateConfigRsp>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for configRetrieveByKeyPost
     * @param retrieveConfigByKeyReq  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configRetrieveByKeyPostCall(RetrieveConfigByKeyReq retrieveConfigByKeyReq, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = retrieveConfigByKeyReq;

        // create path and map variables
        String localVarPath = "/config/retrieveByKey";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, false);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call configRetrieveByKeyPostValidateBeforeCall(RetrieveConfigByKeyReq retrieveConfigByKeyReq, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = configRetrieveByKeyPostCall(retrieveConfigByKeyReq, _callback);
        return localVarCall;

    }

    /**
     * 查询配置
     * 查询配置通过配置Key和资源ID
     * @param retrieveConfigByKeyReq  (optional)
     * @return RetrieveConfigByKeyRsp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public RetrieveConfigByKeyRsp configRetrieveByKeyPost(RetrieveConfigByKeyReq retrieveConfigByKeyReq) throws ApiException {
        ApiResponse<RetrieveConfigByKeyRsp> localVarResp = configRetrieveByKeyPostWithHttpInfo(retrieveConfigByKeyReq);
        return localVarResp.getData();
    }

    /**
     * 查询配置
     * 查询配置通过配置Key和资源ID
     * @param retrieveConfigByKeyReq  (optional)
     * @return ApiResponse&lt;RetrieveConfigByKeyRsp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RetrieveConfigByKeyRsp> configRetrieveByKeyPostWithHttpInfo(RetrieveConfigByKeyReq retrieveConfigByKeyReq) throws ApiException {
        okhttp3.Call localVarCall = configRetrieveByKeyPostValidateBeforeCall(retrieveConfigByKeyReq, null);
        Type localVarReturnType = new TypeToken<RetrieveConfigByKeyRsp>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 查询配置 (asynchronously)
     * 查询配置通过配置Key和资源ID
     * @param retrieveConfigByKeyReq  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configRetrieveByKeyPostAsync(RetrieveConfigByKeyReq retrieveConfigByKeyReq, final ApiCallback<RetrieveConfigByKeyRsp> _callback) throws ApiException {

        okhttp3.Call localVarCall = configRetrieveByKeyPostValidateBeforeCall(retrieveConfigByKeyReq, _callback);
        Type localVarReturnType = new TypeToken<RetrieveConfigByKeyRsp>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for configTemplatePut
     * @param updateConfigTemplateReq  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configTemplatePutCall(UpdateConfigTemplateReq updateConfigTemplateReq, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = updateConfigTemplateReq;

        // create path and map variables
        String localVarPath = "/configTemplate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, false);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call configTemplatePutValidateBeforeCall(UpdateConfigTemplateReq updateConfigTemplateReq, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = configTemplatePutCall(updateConfigTemplateReq, _callback);
        return localVarCall;

    }

    /**
     * 更新配置模版
     * 更新配置模版，需要全部的配置模版信息
     * @param updateConfigTemplateReq  (optional)
     * @return UpdateConfigTemplateRsp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public UpdateConfigTemplateRsp configTemplatePut(UpdateConfigTemplateReq updateConfigTemplateReq) throws ApiException {
        ApiResponse<UpdateConfigTemplateRsp> localVarResp = configTemplatePutWithHttpInfo(updateConfigTemplateReq);
        return localVarResp.getData();
    }

    /**
     * 更新配置模版
     * 更新配置模版，需要全部的配置模版信息
     * @param updateConfigTemplateReq  (optional)
     * @return ApiResponse&lt;UpdateConfigTemplateRsp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateConfigTemplateRsp> configTemplatePutWithHttpInfo(UpdateConfigTemplateReq updateConfigTemplateReq) throws ApiException {
        okhttp3.Call localVarCall = configTemplatePutValidateBeforeCall(updateConfigTemplateReq, null);
        Type localVarReturnType = new TypeToken<UpdateConfigTemplateRsp>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 更新配置模版 (asynchronously)
     * 更新配置模版，需要全部的配置模版信息
     * @param updateConfigTemplateReq  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configTemplatePutAsync(UpdateConfigTemplateReq updateConfigTemplateReq, final ApiCallback<UpdateConfigTemplateRsp> _callback) throws ApiException {

        okhttp3.Call localVarCall = configTemplatePutValidateBeforeCall(updateConfigTemplateReq, _callback);
        Type localVarReturnType = new TypeToken<UpdateConfigTemplateRsp>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
